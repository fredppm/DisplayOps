/**
 * Auto-inicializa√ß√£o dos servi√ßos core via API call
 * Este arquivo s√≥ ser√° executado no server-side via API routes
 */

// Fun√ß√£o para auto-inicializar os servi√ßos (apenas server-side)
export async function autoInitializeServices() {
  console.log('üöÄ Iniciando auto-inicializa√ß√£o dos servi√ßos...');
  
  try {
    const services = [];
    
    // 1. Inicializar Discovery Service
    try {
      const discoveryService = require('./discovery-singleton').discoveryService;
      await discoveryService.initialize();
      console.log('‚úÖ Discovery Service auto-inicializado com sucesso');
      services.push('Discovery Service');
    } catch (error) {
      console.warn('‚ö†Ô∏è Discovery Service n√£o dispon√≠vel:', error.message);
    }
    
    // 2. Inicializar gRPC Client (se habilitado)
    const grpcEnabled = process.env.GRPC_ADMIN_ENABLED !== 'false' && 
                       process.env.CONTROLLER_AUTO_REGISTER !== 'false';
    
    console.log('üîç gRPC auto-init check:', {
      GRPC_ADMIN_ENABLED: process.env.GRPC_ADMIN_ENABLED,
      CONTROLLER_AUTO_REGISTER: process.env.CONTROLLER_AUTO_REGISTER,
      grpcEnabled
    });
    
    if (grpcEnabled) {
      try {
        // Usar import din√¢mico para evitar problemas de depend√™ncia
        const { grpcClientSingleton } = await import('./grpc-client-singleton');
        await grpcClientSingleton.start();
        console.log('‚úÖ gRPC Client auto-inicializado com sucesso');
        services.push('gRPC Client');
      } catch (error) {
        console.warn('‚ö†Ô∏è gRPC Client n√£o dispon√≠vel:', error.message);
      }
    } else {
      console.log('‚ÑπÔ∏è gRPC Client desabilitado via configura√ß√£o');
    }
    
    // 3. Verificar outros servi√ßos (fallback)
    try {
      const grpcClientService = require('./server/grpc-client-service').grpcClientService;
      console.log('‚úÖ gRPC Client Service (legacy) instanciado');
      services.push('gRPC Client Service (legacy)');
    } catch (error) {
      console.log('‚ÑπÔ∏è gRPC Client Service (legacy) n√£o dispon√≠vel');
    }
    
    const message = services.length > 0 
      ? `Services initialized: ${services.join(', ')}`
      : 'No services were initialized';
      
    return { success: true, message, services };
  } catch (error) {
    console.error('‚ùå Erro na auto-inicializa√ß√£o dos services:', error);
    throw error;
  }
}