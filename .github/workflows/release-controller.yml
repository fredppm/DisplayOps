name: Release Controller

permissions:
  contents: write
  
on:
  push:
    tags:
      - 'controller-v*'  # Triggers on tags like controller-v1.0.3
  workflow_dispatch:     # Allow manual trigger
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.3)'
        required: true
        type: string

env:
  # Electron build settings
  ELECTRON_CACHE: ~/.cache/electron
  ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: win32
          - os: macos-latest  
            platform: darwin
          - os: ubuntu-latest
            platform: linux

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get version from tag or input
        id: version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
            echo "tag_name=controller-v${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Extract version from tag (controller-v1.0.3 -> 1.0.3)
            VERSION=${GITHUB_REF#refs/tags/controller-v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Update package.json version
        shell: bash
        working-directory: web-controller-electron
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: Install dependencies
        working-directory: web-controller-electron
        run: |
          # Install dependencies without workspace conflicts
          npm install --no-workspaces

      - name: Build web-controller
        working-directory: web-controller
        run: |
          # Install web-controller dependencies first
          npm install --no-workspaces
          npm run build

      - name: Setup virtual display and Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libnss3-dev libatk-bridge2.0-dev libdrm2 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libxss1 libasound2-dev
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: web-controller-electron
        run: |
          npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: web-controller-electron
        run: |
          echo "Starting macOS build..."
          npm run build
          npm run dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        working-directory: web-controller-electron
        run: |
          echo "Starting Linux build with comprehensive debugging..."
          
          echo "=== System Info ==="
          uname -a
          node --version
          npm --version
          
          echo "=== Checking dependencies ==="
          ls -la ../web-controller/.next/ || echo "No .next directory found"
          ls -la ../web-controller/package.json || echo "No web-controller package.json found"
          
          echo "=== Electron Builder Debug ==="
          echo "Contents of release directory before build:"
          ls -la release/ || echo "No release directory yet"
          
          echo "=== Starting TypeScript build ==="
          npm run build 2>&1 || echo "TypeScript build failed"
          
          echo "=== Starting Electron Linux build with verbose output ==="
          DEBUG=electron-builder npm run dist:linux 2>&1 || echo "Electron build failed"
          
          echo "=== Post-build analysis ==="
          echo "Contents of release directory after build:"
          ls -la release/ || echo "No release directory created"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Disable sandbox for Linux CI environments
          ELECTRON_DISABLE_SANDBOX: 1
          # Additional Linux-specific flags
          DISPLAY: ":99"
          # Electron build environment
          USE_HARD_LINKS: false
          # Prevent native module compilation issues
          npm_config_cache: /tmp/.npm
          npm_config_prefer_offline: true

      - name: List build artifacts
        shell: bash
        working-directory: web-controller-electron
        run: |
          echo "Build artifacts:"
          find release -type f -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" 2>/dev/null || echo "No artifacts found"

      - name: Create Release with GitHub CLI
        working-directory: web-controller-electron
        shell: bash
        run: |
          # Debug GitHub CLI setup
          echo "Testing GitHub CLI..."
          echo "GitHub token length: ${#GH_TOKEN}"
          echo "Repository: ${{ github.repository }}"
          echo "Tag: ${{ steps.version.outputs.tag_name }}"
          
          # Test basic GitHub CLI functionality
          echo "Testing gh auth status..."
          gh auth status || echo "GitHub CLI auth failed"
          
          echo "Testing repository access..."
          gh repo view ${{ github.repository }} --json name || echo "Cannot access repository"
          
          # List available artifacts for this platform
          echo "Available artifacts:"
          ls -la release/ || echo "No release directory found"
          
          # Create release with available artifacts
          echo "Creating release..."
          
          # Create release first
          gh release create ${{ steps.version.outputs.tag_name }} \
            --title "DisplayOps Controller v${{ steps.version.outputs.version }}" \
            --notes "Auto-generated release from GitHub Actions" || echo "Release might already exist"
          
          # Upload only installer files from release/ root directory (not subdirectories)
          # Use ls to list files and explicitly exclude subdirectory files
          cd release/
          for file in *.exe *.dmg *.AppImage *.deb; do
            if [ -f "$file" ]; then
              echo "Uploading: $file"
              gh release upload ${{ steps.version.outputs.tag_name }} "$file" --clobber || echo "Failed to upload $file"
            fi
          done
          cd ..
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release completed
        run: |
          echo "Release created successfully on ${{ matrix.os }}!"
          echo "Apps can now auto-update to v${{ steps.version.outputs.version }}"